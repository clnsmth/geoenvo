@startuml
package "geoenvo" {

    class Resolver {
        # data_source : DataSource[*]
        + Resolver(data_source : DataSource[*])
        + resolve(geometry : Geometry) : Data
    }

    interface DataSource {
        # geometry : dictionary
        # data : dictionary
        # env_properties : dictionary
        + DataSource()
        + resolve(geometry : Geometry) : Environment[0..*]
        - convert_data() : dictionary
        - unique_environment() : dictionary[*]
        - has_environment() : bool
        - set_properties() : DataSource
        - apply_vocabulary_mapping() : string
    }

    class WorldTerrestrialEcosystems implements DataSource {
    }

    class EcologicalCoastalUnits implements DataSource {
    }

    class EcologicalMarineUnits implements DataSource {
    }

    class Geometry {
        # data : dictionary
        + Geometry(geometry : dictionary)
        + is_valid() : bool
        + to_esri_point() : dictionary
        + to_esri_polygon() : dictionary
        + to_esri_polygon() : dictionary
        + geometry_type() : string
    }

    class Environment {
        # data : dictionary
        + Environment()
        + has_environment() : bool
        + data() : dictionary
    }

    class Data {
        # data : dictionary
        + Data(geometry : Geometry, environment : Environment)
        + apply_vocabulary_mapping(vocabulary : string) : Environment
        + write(file_path : string)
        + read(file_path : string) : Environment
        + to_schema_org() : dictionary
    }

    Resolver "1" -- "1..*" DataSource
    Resolver "1" -- "1" Data
    Resolver "1" -- "1" Geometry
    DataSource "1" -- "0..*" Environment
    DataSource "1" -- "1" Geometry
}
@enduml